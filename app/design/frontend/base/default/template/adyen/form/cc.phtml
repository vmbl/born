<?php
/**
 * Adyen Payment Module
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * @category	Adyen
 * @package	Adyen_Payment
 * @copyright	Copyright (c) 2011 Adyen (http://www.adyen.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
/**
 * @category   Payment Gateway
 * @package    Adyen_Payment
 * @author     Adyen
 * @property   Adyen B.V
 * @copyright  Copyright (c) 2014 Adyen BV (http://www.adyen.com)
 */
?>
<?php $_code=$this->getMethodCode() ?>
<ul class="form-list" id="payment_form_<?php echo $_code ?>" style="display:none;">
<li class="adyen_payment_creditcard_labels">
    <?php $count = 0;
    foreach ($this->getCcAvailableTypes() as $_typeCode => $_typeName): ?>
        <?php $_filename = $this->getSkinUrl('images'.DS.'adyen'.DS. strtolower($_typeCode) . "_small.png"); ?>
        <img id="cc_type_<?php echo $count; ?>" width="40" height="22" src="<?php echo $_filename; ?>" alt="" class="mid" />
        <?php ++$count;
    endforeach; ?>
    <input type="hidden" id="<?php echo $_code ?>_cc_type" name="payment[cc_type]" value=""/>
</li>
<li class="adyen_payment_input_fields">
    <label for="<?php echo $_code ?>_cc_owner" class="required"><em>*</em><?php echo $this->__('Name on Card') ?></label>
    <div class="input-box">
        <input type="text" title="<?php echo $this->__('Name on Card') ?>" class="input-text required-entry" id="<?php echo $_code ?>_cc_owner" <?php echo (!$this->isCseEnabled() ? "name=\"payment[cc_owner]\"" : "data-encrypted-name=\"holderName\""); ?> value="<?php echo $this->htmlEscape($this->getInfoData('cc_owner')) ?>" maxlength="100" />
    </div>
</li>
<li class="adyen_payment_input_fields">
    <label for="<?php echo $_code ?>_cc_number" class="required"><em>*</em><?php echo $this->__('Credit Card Number') ?></label>
    <div class="input-box">
        <input type="text" id="<?php echo $_code ?>_cc_number" <?php echo (!$this->isCseEnabled() ? "name=\"payment[cc_number]\"" : " data-encrypted-name=\"number\""); ?> title="<?php echo $this->__('Credit Card Number') ?>" class="input-text validate-cc-type required-entry" value="" maxlength="23"/>
        <script type="text/javascript">
            var group_types = new Array();
            <?php foreach ($this->getCcAvailableTypes() as $_typeCode => $_typeName): ?>
            group_types.push("<?php echo $_typeCode; ?>");
            <?php endforeach ?>

            card_previousCardNumber = "";

            function selectBrand() {

                cardNumber = (document.getElementById( '<?php echo $_code ?>_cc_number' ).value);
                dontHideErrorFrame = null;

                // empty card field - reset all
                if (cardNumber.length == 0) {
                    card_previousCardNumber = cardNumber;
                    cardSetCardBrand(null, false, group_types);
                    return;
                }

                // When editing the card (but not adding digits at the end), don't reformat the number
                var l=0;
                while(l < card_previousCardNumber.length && l < cardNumber.length) {
                    if(cardNumber[l] != card_previousCardNumber[l]) {
                        card_previousCardNumber = cardNumber;
                        return;
                    }
                    l++;
                }

                // remove all whitespace
                reg = /\s+/g;
                cardNumber = cardNumber.replace(reg,'');

                nrOfDigits = cardNumber.length;
                if(nrOfDigits > 19){
                    return;
                }

                baseCard = getBaseCard(cardNumber, group_types);

                if(baseCard != null) {
                    cardSetCardBrand(baseCard, true, group_types);
                } else if(nrOfDigits > 4) {
                    cardSetCardBrand(null, true, group_types);
                } else {
                    cardSetCardBrand(null, false, group_types);
                }

                //show value with white space after four numbers
                result = cardNumber.replace(/(\d{4})/g, '$1 ');
                result = result.replace(/\s+$/, ''); //remove trailing spaces
                card_previousCardNumber = result;
                document.getElementById( '<?php echo $_code; ?>_cc_number' ).value = result;
            }

            function cardSetCardBrand(selectedCard, greyInactive, group_types) {

                for(var i = 0; i < group_types.length; ++i) {
                    var imageId =  'cc_type_'  + i;
                    if(selectedCard != null && group_types[i] == selectedCard.cardtype) {
                        // remove class
                        $(imageId).removeClassName('grey');
                        // set hidden field cc type for installments
                        $('<?php echo $_code ?>_cc_type').setValue(selectedCard.cardtype);
                    } else {
                        if(greyInactive) {
                            // add class
                            $(imageId).addClassName('grey');
                        } else {
                            // remove class
                            $(imageId).removeClassName('grey');
                        }
                    }
                    document.getElementById(imageId).style.display="inline";
                }

                <?php if($this->hasInstallments()): ?>
                    if(selectedCard != null ) {
                        var interval = setInterval(getInstallments(selectedCard.cardtype), 500);
                    }
                <?php endif; ?>
            }

            var ajaxReq;
            function getInstallments(variant) {

                // get the installments for this cardtype
                var ccType = variant;
                console.log(ccType);

                var url = '<?php echo $this->getUrl('adyen/GetInstallments', array('_secure'=>true)); ?>';

                if(ajaxReq && ajaxReq.readystate != 4){
                    ajaxReq.transport.abort();
                }

                ajaxReq = new Ajax.Request(url, {
                    parameters: {ccType: ccType, isAjax: 1, method: 'POST'},
                    onSuccess: function(transport) {

                        if(transport.status == 200) {

                            // get current selected installment
                            var currentSelectedInstallment = document.getElementById('<?php echo $_code ?>_installments').getValue();

                            // clear the select box
                            document.getElementById('<?php echo $_code ?>_installments').options.length = 0;

                            var response = transport.responseText.evalJSON();

                            var sel = false;
                            for (var key in response) {

                                // change the installments
                                var opt = document.createElement('option');
                                opt.text = response[key]
                                opt.value = key;
                                // check if selected installment is still available
                                if(currentSelectedInstallment == key) {
                                    sel = true;
                                }
                                $('<?php echo $_code ?>_installments').options.add(opt);
                            }

                            if(sel == true && currentSelectedInstallment) {
                                document.getElementById('adyen_cc_installments').value=currentSelectedInstallment;
                            }
                        }
                    },
                    onFailure: function(){
                        alert('<?php echo $this->jsQuoteEscape($this->__('Server Error. Please try again.')) ?>');
                    }
                });
            }

            // default
            cardSetCardBrand(null, false, group_types);

            // observers
            Event.observe($('<?php echo $_code ?>_cc_number'), 'change', selectBrand);
            Event.observe($('<?php echo $_code ?>_cc_number'), 'keyup', selectBrand);

        </script>
    </div>
</li>
<li class="adyen_payment_input_fields">
    <label for="<?php echo $_code ?>_expiration" class="required"><em>*</em><?php echo $this->__('Expiration Date') ?></label>
    <div class="input-box">
        <div class="v-fix">
            <select id="<?php echo $_code ?>_expiration" <?php echo (!$this->isCseEnabled() ? "name=\"payment[cc_exp_month]\"" : "data-encrypted-name=\"expiryMonth\""); ?> class="month validate-cc-exp required-entry">
                <?php $_ccExpMonth = $this->getInfoData('cc_exp_month') ?>
                <?php foreach ($this->getCcMonths() as $k=>$v): ?>
                    <option value="<?php echo $k?$k:'' ?>"<?php if($k==$_ccExpMonth): ?> selected="selected"<?php endif ?>><?php echo $v ?></option>
                <?php endforeach ?>
            </select>
        </div>
        <div class="v-fix">
            <?php $_ccExpYear = $this->getInfoData('cc_exp_year') ?>
            <select id="<?php echo $_code ?>_expiration_yr" <?php echo (!$this->isCseEnabled() ? "name=\"payment[cc_exp_year]\"" : "data-encrypted-name=\"expiryYear\""); ?> class="year required-entry">
                <?php foreach ($this->getCcYears() as $k=>$v): ?>
                    <option value="<?php echo $k?$k:'' ?>"<?php if($k==$_ccExpYear): ?> selected="selected"<?php endif ?>><?php echo $v ?></option>
                <?php endforeach ?>
            </select>
        </div>
    </div>
</li>
<?php echo $this->getChildHtml() ?>
<?php if($this->hasVerification()): ?>
    <li class="adyen_payment_input_fields">
        <label for="<?php echo $_code ?>_cc_cid" class="required"><em>*</em><?php echo $this->__('Card Verification Number') ?></label>
        <div class="input-box">
            <div class="v-fix">
                <input type="text" title="<?php echo $this->__('Card Verification Number') ?>" class="input-text cvv required-entry" id="<?php echo $_code ?>_cc_cid" <?php echo (!$this->isCseEnabled() ? "name=\"payment[cc_cid]\"" : "data-encrypted-name=\"cvc\""); ?> value="" maxlength="4" />
            </div>
            <a href="#" class="cvv-what-is-this"><?php echo $this->__('What is this?') ?></a>
        </div>
    </li>
<?php endif; ?>
<?php if($this->hasInstallments()): ?>
    <li class="adyen_payment_input_fields">
        <label for="<?php echo $_code ?>_installments" class="required"><em>*</em><?php echo $this->__('Installments') ?></label>
        <div class="input-box">
            <div class="v-fix">
                <select id="<?php echo $_code ?>_installments" name="payment[additional_data]" class="number required-entry">
                    <?php foreach ($this->getPossibleInstallments() as $k=>$v): ?>
                        <option value="<?php echo $k?$k:'' ?>"><?php echo $v ?></option>
                    <?php endforeach ?>
                </select>
            </div>
        </div>
    </li>
<?php endif;?>

<?php if($this->getRecurringType() == "ONECLICK" || $this->getRecurringType() == "ONECLICK,RECURRING"): ?>
    <li class="adyen_payment_input_fields">
        <div class="input-box">
            <div class="v-fix">
                <input type="checkbox" name="payment[store_cc]" id="<?php echo $_code ?>_store_cc" value="1" checked />
                <label for="<?php echo $_code ?>_store_cc" class="required"><em>*</em><?php echo $this->__('Remember these details') ?></label>
            </div>
        </div>
    </li>
<?php endif; ?>
</ul>
<?php if ($this->isCseEnabled()): ?>
    <input type="hidden" id="<?php echo $_code ?>_encrypted_form_expiry_generationtime" value="<?php echo date("c"); ?>" data-encrypted-name="generationtime" />
    <input type="hidden" id="adyen-cse-form" />
    <script type="text/javascript">
        //<![CDATA[
        var cse_form = document.getElementById('adyen-cse-form').form;
        var cse_key = <?php echo json_encode($this->getCsePublicKey()); ?>;
        var cse_options = {
            name:  'payment[encrypted_data]',
            force: true
        };
        var cse = function() {
            if (payment.currentMethod && payment.currentMethod == '<?php echo $_code ?>') {
                try {
                    adyen.encrypt.createEncryptedForm(cse_form, cse_key, cse_options);
                } catch (e) {
                    var encryptionFailed = true;
                }
                var encryptedForm = document.getElementById(cse_options.name);
                if (encryptionFailed || !encryptedForm || encryptedForm.value.length == 0) {
                    alert("Warning: Adyen Client Side Encryption cannot succeed.");
                }
            }
        }
        var cse_initialize = function() {
            if (typeof adyen === 'undefined') {
                js = document.createElement("script");
                js.type = "text/javascript";
                js.src = "<?php echo Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_JS); ?>adyen/payment/adyen.encrypt.js";
                document.body.appendChild(js);
            }

            if (typeof payment !== 'undefined' && typeof payment.save !== 'undefined') {
                payment.save = payment.save.wrap(function(originalSaveMethod) {
                    cse.call(this);
                    originalSaveMethod();
                });
            }
            if (typeof checkout !== 'undefined' && typeof checkout.save !== 'undefined') {
                checkout.save = checkout.save.wrap(function(originalSaveMethod) {
                    cse.call(this);
                    originalSaveMethod();
                });
            }

            // Fix for the onestepcheckout plugins
            if($('onestepcheckout-place-order')) {
                $('onestepcheckout-place-order').observe('click', function(e) {
                    cse.call(this);
                });
            }

            // fix for the IWD One Page Checkout
            if($('checkout-review-submit')) {
                $$('.opc-btn-checkout').each(function(element) {
                    element.observe('click', function(e) {
                        cse.call(this);
                    });
                })
            }

            //Fix for Inovarti One Step Checkout Brasil
            if($('onestepcheckout-place-order-button')) {
                $('onestepcheckout-place-order-button').observe('click', function(e) {
                    cse.call(this);
                });
            }
        }

        if (document.readyState === "complete") {
            cse_initialize();
        }
        else {
            Event.observe(window, 'load', cse_initialize);
        }
        //]]>
    </script>
<?php endif;?>
